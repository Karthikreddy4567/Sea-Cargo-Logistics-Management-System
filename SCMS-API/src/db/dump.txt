const warehouseManagerSchema = new mongoose.Schema({
    username : { type : String, required: true },
    email: { type: String, required: true },
    userrole: { type: String, required: true },
    wid: {type: String},
    authentication: {
        password: { type: String, required: true, select: false },
        salt: { type: String, select: false },
        sessionToken: { type: String, select: false },
    },
})
export const WarehouseManagerModel = mongoose.model('WarehouseManagerAccount', warehouseManagerSchema);
export const createWarehouseManager = (values: Record<string, any>) => new WarehouseManagerModel(values).save().then((user) => user.toObject());
export const getWMByEmail = (email: String) => WarehouseManagerModel.findOne({ email });
export const getWMBySessionToken = (sessionToken: String) => WarehouseManagerModel.findOne({
    'authentication.sessionToken': sessionToken,
});
export const updateWMById = (id: String, values: Record<string, any> ) => WarehouseManagerModel.findByIdAndUpdate(id);
export const getWMs = () => WarehouseManagerModel.find();
export const getWMById = (id: String) => WarehouseManagerModel.findById(id);
export const deleteWMById = (id: String) => WarehouseManagerModel.findOneAndDelete({ _id : id });


const agentSchema = new mongoose.Schema({
    username : { type : String, required: true },
    email: { type: String, required: true },
    userrole: { type: String, required: true },
    authentication: {
        password: { type: String, required: true, select: false },
        salt: { type: String, select: false },
        sessionToken: { type: String, select: false },
    },
})
export const AgentModel = mongoose.model('AgentAccount', agentSchema);
export const createAgent = (values: Record<string, any>) => new AgentModel(values).save().then((user) => user.toObject());
export const getAgentByEmail = (email: String) => AgentModel.findOne({ email });
export const getAgentBySessionToken = (sessionToken: String) => AgentModel.findOne({
    'authentication.sessionToken': sessionToken,
});
export const updateAgentById = (id: String, values: Record<string, any> ) => AgentModel.findByIdAndUpdate(id);
export const getAgents = () => AgentModel.find();
export const getAgentById = (id: String) => AgentModel.findById(id);
export const deleteAgentById = (id: String) => AgentModel.findOneAndDelete({ _id : id });


const customerSchema = new mongoose.Schema({
    lastname : { type : String, required: true },
    email: { type: String, required: true },
    userrole: { type: String, required: true },
    authentication: {
        password: { type: String, required: true, select: false },
        salt: { type: String, select: false },
        sessionToken: { type: String, select: false },
    },
})
export const CustomerModel = mongoose.model('CustomerAccount', customerSchema);
export const createCustomer = (values: Record<string, any>) => new CustomerModel(values).save().then((user) => user.toObject());
export const getCustomerByEmail = (email: String) => CustomerModel.findOne({ email });
export const getCustomerBySessionToken = (sessionToken: String) => CustomerModel.findOne({
    'authentication.sessionToken': sessionToken,
});
export const updateCustomerById = (id: String, values: Record<string, any> ) => CustomerModel.findByIdAndUpdate(id);
export const getCustomers = () => CustomerModel.find();
export const getCustomerById = (id: String) => CustomerModel.findById(id);
export const deleteCustomerById = (id: String) => CustomerModel.findOneAndDelete({ _id : id });